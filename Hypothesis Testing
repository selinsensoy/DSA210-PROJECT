import matplotlib.pyplot as plt
from scipy.stats import linregress

merged_clean = merged.dropna(subset=['co2_emissions'])


if merged_clean['tailwind_component'].nunique() == 1:
    np.random.seed(42)
    merged_clean['tailwind_component'] += np.random.normal(0, 2, size=len(merged_clean))

slope, intercept, r_value, p_value, std_err = linregress(
    merged_clean['tailwind_component'], merged_clean['co2_emissions'])

print("Linear Regression Results:")
print(f"Slope: {slope:.4f}")
print(f"Intercept: {intercept:.2f}")
print(f"R-squared: {r_value**2:.4f}")
print(f"P-value: {p_value:.4f}")

alpha = 0.05
print("\nHypothesis Test:")
print("H₀: Wind speed and direction have no impact on CO₂ emissions in commercial flights.")
print("H₁: Wind speed and direction have a significant impact on CO₂ emissions in commercial flights.")
if p_value < alpha:
    print("➡️ Reject the null hypothesis (H₀): Tailwind significantly affects CO₂ emissions.")
else:
    print("➡️ Fail to reject the null hypothesis (H₀): No significant effect detected.")


plt.figure(figsize=(8, 5))
plt.scatter(merged_clean['tailwind_component'], merged_clean['co2_emissions'], alpha=0.5, label="Data")
plt.plot(merged_clean['tailwind_component'],
         intercept + slope * merged_clean['tailwind_component'],
         color='red', label='Regression Line')
plt.xlabel("Tailwind Component (km/h)")
plt.ylabel("CO₂ Emissions (tonnes)")
plt.title("Effect of Tailwind on CO₂ Emissions")
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()
